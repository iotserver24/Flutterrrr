name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'
      build_number:
        description: 'Build number (e.g., 1)'
        required: true
        type: string
        default: '1'

jobs:
  build-android:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Build Universal APK
        run: flutter build apk --release

      - name: Rename APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/xibe-chat-v${{ inputs.version }}-${{ inputs.build_number }}.apk
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/xibe-chat-v${{ inputs.version }}-${{ inputs.build_number }}.apk
          retention-days: 1

  build-windows:
    runs-on: windows-latest

    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Create Windows platform files
        run: |
          if (!(Test-Path "windows")) {
            # Create in a temporary directory with valid name, then move
            $guid = [guid]::NewGuid().ToString() -replace '-', '_'
            $tempDir = New-Item -ItemType Directory -Path "$env:TEMP\xibe_chat_temp_$guid" -Force
            Copy-Item -Path "pubspec.yaml" -Destination "$tempDir\pubspec.yaml"
            Copy-Item -Path "lib" -Destination "$tempDir\lib" -Recurse -Force
            Push-Location $tempDir
            flutter create --platforms=windows .
            Pop-Location
            Move-Item -Path "$tempDir\windows" -Destination "windows" -Force
            Remove-Item -Path $tempDir -Recurse -Force
          }
        shell: powershell

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install dependencies
        run: flutter pub get

      - name: Create self-signed certificate
        run: |
          $cert = New-SelfSignedCertificate -Type Custom -Subject "CN=XibeChat" -KeyUsage DigitalSignature -FriendlyName "XibeChat" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
          $password = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 16 | % {[char]$_})
          $pwd = ConvertTo-SecureString -String $password -Force -AsPlainText
          $certPath = Join-Path -Path $env:TEMP -ChildPath "xibechat.pfx"
          Export-PfxCertificate -Cert "Cert:\CurrentUser\My\$($cert.Thumbprint)" -FilePath $certPath -Password $pwd
          echo "CERT_PATH=$certPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CERT_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Build Windows EXE
        run: flutter build windows --release

      - name: Build Windows MSIX
        run: |
          flutter pub run msix:create --certificate-path ${{ env.CERT_PATH }} --certificate-password ${{ env.CERT_PASSWORD }} --install-certificate false --version ${{ inputs.version }}.${{ inputs.build_number }}
      
      - name: Rename Windows artifacts
        run: |
          Copy-Item -Path "build\windows\x64\runner\Release" -Destination "xibe-chat-windows-v${{ inputs.version }}-${{ inputs.build_number }}" -Recurse
          $msixFile = Get-ChildItem -Path . -Filter "*.msix" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($msixFile) {
            Copy-Item -Path $msixFile.FullName -Destination "xibe-chat-v${{ inputs.version }}-${{ inputs.build_number }}.msix"
            Write-Host "Found and renamed MSIX: $($msixFile.FullName)"
          } else {
            Write-Warning "No MSIX file found"
          }
        shell: powershell

      - name: Upload Windows EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: xibe-chat-windows-v${{ inputs.version }}-${{ inputs.build_number }}/**
          retention-days: 1

      - name: Upload Windows MSIX artifact
        uses: actions/upload-artifact@v4
        if: hashFiles('xibe-chat-v${{ inputs.version }}-${{ inputs.build_number }}.msix') != ''
        with:
          name: windows-msix
          path: xibe-chat-v${{ inputs.version }}-${{ inputs.build_number }}.msix
          retention-days: 1

  create-release:
    needs: [build-android, build-windows]
    if: always()
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: read

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Prepare Windows EXE for release
        continue-on-error: true
        run: |
          if [ -d "artifacts/windows-exe" ] && [ "$(ls -A artifacts/windows-exe)" ]; then
            cd artifacts/windows-exe
            zip -r ../../xibe-chat-windows-v${{ inputs.version }}-${{ inputs.build_number }}.zip .
            cd ../..
            echo "✓ Windows EXE zip created"
          else
            echo "⚠ Warning: No Windows EXE files found, skipping zip creation"
          fi
      
      - name: Move files to release directory
        run: |
          mkdir -p release-files
          # Track what we have
          HAS_ANDROID=false
          HAS_WINDOWS_MSIX=false
          HAS_WINDOWS_EXE=false
          
          # Move Android APK
          if [ -d "artifacts/android-apk" ] && [ "$(ls -A artifacts/android-apk)" ]; then
            mv artifacts/android-apk/* release-files/
            echo "✓ Moved Android APK files"
            HAS_ANDROID=true
          else
            echo "⚠ Warning: No Android APK files found"
          fi
          # Move Windows MSIX
          if [ -d "artifacts/windows-msix" ] && [ "$(ls -A artifacts/windows-msix)" ]; then
            mv artifacts/windows-msix/* release-files/
            echo "✓ Moved Windows MSIX files"
            HAS_WINDOWS_MSIX=true
          else
            echo "⚠ Warning: No Windows MSIX files found"
          fi
          # Move Windows EXE zip
          if [ -f "xibe-chat-windows-v${{ inputs.version }}-${{ inputs.build_number }}.zip" ]; then
            mv xibe-chat-windows-v${{ inputs.version }}-${{ inputs.build_number }}.zip release-files/
            echo "✓ Moved Windows EXE zip"
            HAS_WINDOWS_EXE=true
          else
            echo "⚠ Warning: No Windows EXE zip found"
          fi
          
          # Save status to environment
          echo "HAS_ANDROID=$HAS_ANDROID" >> $GITHUB_ENV
          echo "HAS_WINDOWS_MSIX=$HAS_WINDOWS_MSIX" >> $GITHUB_ENV
          echo "HAS_WINDOWS_EXE=$HAS_WINDOWS_EXE" >> $GITHUB_ENV
          
          echo ""
          echo "📦 Release files ready:"
          ls -lh release-files/ || echo "No files available"
          
          # Check if we have at least one artifact
          if [ "$(ls -A release-files/)" ]; then
            echo "HAS_ARTIFACTS=true" >> $GITHUB_ENV
            echo "✅ At least one artifact available for release"
          else
            echo "HAS_ARTIFACTS=false" >> $GITHUB_ENV
            echo "❌ No artifacts available for release"
          fi
      
      - name: Check if release can be created
        if: env.HAS_ARTIFACTS == 'false'
        run: |
          echo "::warning::No artifacts available - release will not be created"
          echo "::notice::At least one build job must succeed to create a release"
      
      - name: Create Git Tag
        if: env.HAS_ARTIFACTS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `v${{ inputs.version }}-${{ inputs.build_number }}`;
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha
              });
              console.log(`✓ Created tag: ${tag}`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`⚠ Tag ${tag} already exists, using existing tag`);
              } else {
                throw error;
              }
            }
      
      - name: Create GitHub Release
        if: env.HAS_ARTIFACTS == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version }}-${{ inputs.build_number }}
          name: Xibe Chat v${{ inputs.version }}-${{ inputs.build_number }}
          draft: false
          prerelease: false
          files: release-files/*
          fail_on_unmatched_files: false
          body: |
            ## 🚀 Xibe Chat v${{ inputs.version }}-${{ inputs.build_number }}
            
            ### 📥 Available Downloads
            
            ${{ env.HAS_ANDROID == 'true' && '**📱 Android:**' || '**📱 Android:** ⚠️ Build failed - not available' }}
            ${{ env.HAS_ANDROID == 'true' && format('- `xibe-chat-v{0}-{1}.apk` - Universal APK for all Android devices', inputs.version, inputs.build_number) || '' }}
            
            ${{ (env.HAS_WINDOWS_MSIX == 'true' || env.HAS_WINDOWS_EXE == 'true') && '**💻 Windows:**' || '**💻 Windows:** ⚠️ Build failed - not available' }}
            ${{ env.HAS_WINDOWS_MSIX == 'true' && format('- `xibe-chat-v{0}-{1}.msix` - Windows Store-style installer', inputs.version, inputs.build_number) || '' }}
            ${{ env.HAS_WINDOWS_EXE == 'true' && format('- `xibe-chat-windows-v{0}-{1}.zip` - Portable version (no installation required)', inputs.version, inputs.build_number) || '' }}
            
            ---
            
            ### 📋 Installation Instructions
            
            #### Android
            1. Download the APK file
            2. Enable "Install from Unknown Sources" in your device settings
            3. Tap the downloaded APK to install
            
            #### Windows MSIX
            1. Download the MSIX file
            2. Double-click to install
            3. You may need to trust the self-signed certificate on first install
            
            #### Windows Portable (ZIP)
            1. Download the ZIP file
            2. Extract to any folder
            3. Run `xibe_chat.exe` - no installation needed!
            
            ---
            
            ### ✨ Features
            - 🤖 AI-powered chat interface
            - 💬 Multiple conversation threads
            - 🌓 Dark/Light theme support
            - 📝 Markdown message rendering
            - 💾 Local chat history with SQLite
            - 🔍 Web search integration
            
            ---
            
            ### 📊 Build Information
            - **Version:** ${{ inputs.version }}
            - **Build Number:** ${{ inputs.build_number }}
            - **Build Date:** ${{ github.event.repository.updated_at }}
            - **Commit:** ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup artifacts
        if: always()
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            android-apk
            windows-exe
            windows-msix